/**
 * Smart Origin Switcher v1.0
 * يتحقق من عدة مسارات Backend ويحدّث سر BACKEND_ORIGIN للـ Worker تلقائيًا.
 */
import fs from 'node:fs'
import { spawnSync } from 'node:child_process'

const configFile = new URL('./origin-config.json', import.meta.url).pathname
const healthPath = '/api/health'
// حدّث workers.dev لحسابك الفعلي
// لا تستخدم workers.dev كأصل Backend حتى لا يحدث Proxy إلى نفسه
// Candidates MUST be true backend origins (not the Worker route itself) to avoid proxy recursion.
const origins = [
  'https://app.mmc-mms.com'
]

async function checkOrigin(base) {
  try {
    const ctl = new AbortController()
    const t = setTimeout(() => ctl.abort('timeout'), 5000)
    const res = await fetch(base.replace(/\/$/, '') + healthPath, { method: 'GET', signal: ctl.signal })
    clearTimeout(t)
    if (!res.ok) return false
    try {
      const j = await res.clone().json()
      return j?.ok === true || j?.status === 'up' || j?.backend === 'up'
    } catch {
      return true
    }
  } catch {
    return false
  }
}

async function run() {
  for (const o of origins) {
    const ok = await checkOrigin(o)
    if (ok) {
      console.log('✅ Active origin:', o)
      fs.writeFileSync(configFile, JSON.stringify({ activeOrigin: o, updated: new Date().toISOString() }, null, 2))
      // نستخدم wrangler secret put لتحديث السر
      // ملاحظة: wrangler يتطلب إدخال القيمة من stdin
      const put = spawnSync('npx', ['wrangler', 'secret', 'put', 'BACKEND_ORIGIN'], { input: o + '\n', stdio: ['pipe', 'inherit', 'inherit'] })
      if (put.status !== 0) process.exit(put.status ?? 1)
      console.log('🔄 Worker BACKEND_ORIGIN updated')
      return
    }
  }
  console.error('❌ No reachable origin. Retrying later...')
  process.exit(1)
}

run()

// Generated by Copilot