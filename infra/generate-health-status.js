import fs from 'node:fs'

function fmt(ms) { return `${ms}ms` }

async function ping(url, opts = {}) {
  const t0 = Date.now()
  try {
    const ctl = new AbortController()
    const timer = setTimeout(() => ctl.abort('timeout'), opts.timeout ?? 5000)
    const res = await fetch(url, { method: 'GET', signal: ctl.signal, headers: opts.headers })
    clearTimeout(timer)
    const text = await res.text()
    return { ok: res.ok, status: res.status, ms: Date.now() - t0, text, headers: Object.fromEntries(res.headers.entries()) }
  } catch (e) {
    return { ok: false, status: 0, ms: Date.now() - t0, error: String(e) }
  }
}

async function run() {
  // جرّب api.mmc-mms.com وإن كان محجوبًا يمكن استخدام مسار بديل تحت النطاق الرئيسي
  const site = process.env.SITE_ORIGIN || 'https://mmc-mms.com'
  // جرب عدة مصادر للوصول للـ Worker: api. ثم مسار /api على النطاق الرئيسي، ثم worker.dev إن تم توفيره
  const candidates = []
  const preferred = process.env.API_ORIGIN || 'https://api.mmc-mms.com'
  candidates.push(preferred)
  candidates.push('https://mmc-mms.com/api')
  if (process.env.WORKER_DEV_ORIGIN) candidates.push(process.env.WORKER_DEV_ORIGIN)

  let active = ''
  let workerOk = false
  let backendOk = false
  let corsOk = false
  let proxyMs = 0
  let workerStatus = 0

  for (const base of candidates) {
    const h = await ping(base.replace(/\/$/, '') + '/health')
    if (h.ok) {
      active = base
      workerOk = true
      workerStatus = h.status
      try {
        const body = JSON.parse(h.text || '{}')
        backendOk = body?.backend === 'up'
      } catch {}
      const p = await ping(base.replace(/\/$/, '') + '/api/health', { headers: { origin: site } })
      proxyMs = p.ms
      corsOk = (p.headers?.['access-control-allow-origin'] || p.headers?.['Access-Control-Allow-Origin']) === site
      break
    }
  }

  const lines = []
  lines.push('# 🩺 Health Status (Auto Updated)')
  lines.push('')
  lines.push(`Last Check: ${new Date().toISOString()}`)
  if (active) lines.push(`Active Origin: ${active}`)
  lines.push(`Worker Health: ${workerOk ? '✅' : '❌'} (${workerStatus})`)
  lines.push(`Backend Health: ${backendOk ? '✅' : '❌'}`)
  lines.push(`Proxy Response Time: ${fmt(proxyMs)}`)
  lines.push(`CORS: ${corsOk ? '✅' : '❌'}`)
  lines.push('Next Check: +10 min')
  lines.push('')

  fs.writeFileSync('./HEALTH_STATUS.md', lines.join('\n'), 'utf8')
  console.log('Updated HEALTH_STATUS.md')
  process.exit(workerOk && corsOk ? 0 : 1)
}

run()

// Generated by Copilot